library(shiny)
setwd("/Users/qianer/Desktop/Visualization/lab5/5apps")
runApp("app2")
runApp("app3")
runApp("app5")
runApp("app4")
runApp("app3")
runApp("app4")
install.packages("ergm")
install.packages("sna")
library(ergm)
library(sna)
data(florentine)
gplot(flomarriage)
gplot(flobusiness)  # note the use of 'gplot' command for graphs
G = array(dim=c(16,16,2))
G[,,1] = as.matrix(flomarriage) # note use of as.matrix command
G[,,2] = as.matrix(flobusiness)
# use function 'qaptest'
Q = qaptest(G,gcor,g1=1,g2=2) # G is data, 'gcor' is function (graph correlation)
# g1,g2 indicate which elements of the data array to correlate
# don't exclude this!
# we can summarize and plot the results, like in regression
summary(Q)
plot(Q)
data(florentine)
flo.mar.1 <- ergm(flomarriage ~ edges)
flo.mar.1
summary(flo.mar.1)
flo.mar.2 <- ergm(flomarriage ~ edges + triangles, seed=1)
flo.mar.2
summary(flo.mar.2)
flo.mar.3 <- ergm(flobusiness ~ edges + edgecov(flomarriage))
flo.mar.3
summary(flo.mar.3)
w.vec <- flomarriage %v% 'wealth'  # Store the node wealth in a numeric vector.
w.vec
gplot(flomarriage, vertex.cex=w.vec/20)	# plot the network with vertex size proportional to wealth
flo.mar.4 <- ergm(flomarriage ~ edges + nodecov("wealth"))
flo.mar.4
summary(flo.mar.4)
flo.mar.5 <- ergm(flomarriage ~ edges + absdiff("wealth"))
flo.mar.5
summary(flo.mar.5)
summary(flo.mar.4) # Take a look at the model
flo.mar.4.gof <- gof(flo.mar.4 ~ degree) # goodness of fit for degree distribution
flo.mar.4.gof # Take a look at the observed & simulated values
plot(flo.mar.4.gof) # plot the observed & simulated values
flo.mar.4.gof2 <- gof(flo.mar.4 ~ distance, nsim=20) # gof based on 20 simulated nets
summary(flo.mar.4.gof2)
plot(flo.mar.4.gof2)
mcmc.diagnostics(flo.mar.2)
# It's easier to go through the charts if we save in a PDF file:
pdf("flo_mar_model2.pdf")
mcmc.diagnostics(flo.mar.2)
dev.off()
mcmc.diagnostics(flo.mar.2)
-1.675 + 0.158
-1.675 + 0.158 + 0.158
flo.mar.22 <- ergm(flomarriage ~ edges + kstar(2), seed=1)
flo.mar.22
summary(flo.mar.22)
summary(florentine)
summary(data(florentine))
data(florentine)
p.vec <- flomarriage %v% 'priorates'  # Store the node priorates in a numeric vector.
p.vec
flo.mar.6 <- ergm(flomarriage ~ edges + nodecov("priorates"))
flo.mar.6
summary(flo.mar.6)
flo.mar.7<- ergm(flomarriage ~ edges + absdiff("priorates"))
flo.mar.7
summary(flo.mar.7)
gplot(flomarriage, vertex.cex=p.vec/20)
